Encapsulation in C# is one of the four fundamental principles of Object-Oriented Programming (OOP).
It refers to the bundling of data (variables) and methods (functions) that operate on the data into 
a single unit, known as a class. It also restricts direct access to some of an object's components,
which is a means of preventing unintended interference and misuse of the data. This is achieved through
access modifiers.

Here are the different types of access modifiers in C#:

public: The code is accessible for all classes.
private: The code is accessible only within the same class.
protected: The code is accessible within the same class and in derived classes.
internal: The code is accessible only within its own assembly, but not from another assembly.
protected internal: The code is accessible within its own assembly or from derived classes.
private protected: The code is accessible within its containing class or in a derived class located in the same assembly.
Access modifiers can also be applied to constructors to control how an object of a class can be instantiated.




Public constructor allows creating instances of Person from anywhere.
Internal constructor allows creating instances of Person only within the same assembly.
Protected constructor can be used only in derived classes, like the Employee class.